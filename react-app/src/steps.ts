import {
  readFileSync,
  writeFileSync,
} from 'fs';
import { join } from 'path';
import { spawn } from 'child_process';
import { EOL } from 'os';

export function sanityCheck() {
  const pjsonBuffer = readFileSync('./package.json', 'utf8');
  let pjson;
  try {
    pjson = JSON.parse(pjsonBuffer);
  } catch (e) {
    throw new Error('Cannot parse package.json');
  }
  const { scripts: { eject } = {} as Record<string, string> } = pjson;
  if (eject !== 'react-scripts eject') {
    throw new Error('Can not run outside of a create-react-app or an ejected project');
  }
}

export function setupProxy(): string {
  const proxyFile = join('src', 'setupProxy.js');
  const proxyCode = `/*
 * This file was auto-generated by Reshuffle
 *
 * It is used to mock the calls to the backend when developing locally.
 * Please keep it with your source control tool.
 * Please do not remove or change it manually.
 */
const { setupProxy } = require('@reshuffle/local-proxy');
module.exports = setupProxy(__dirname);
`;
  try {
    const existingCode = readFileSync(proxyFile, 'utf8');
    if (existingCode === proxyCode) {
      return `Left ${proxyFile} as is`;
    }
  } catch (e) {
      // ignore read errors
  }
  writeFileSync(proxyFile, proxyCode, { flag: 'wx' });
  return `Created ${proxyFile}, please commit this file`;
}

export function installPackages(): Promise<string> {
  return new Promise((resolve, reject) => {
    const dependencies = [
      '@reshuffle/local-proxy',
      '@reshuffle/code-transform',
      '@reshuffle/fetch-runtime',
      '@reshuffle/db',
      '@reshuffle/server-function',
    ];
    const args = [
      'install',
      '--save',
      '--loglevel',
      'error',
    ].concat(dependencies);
    const child = spawn('npm', args, { stdio: 'inherit' });
    child.on('close', (code) => {
      if (code !== 0) {
        reject(new Error(`Could not install ${dependencies.join(' ')}`));
        return;
      }
      resolve(`Packages installed
Modified package.json, please commit this file`);
    });
  });
}

export function ignoreReshuffle(): string {
  const gitIgnoreFile = '.gitignore';
  const ignorePattern = '.reshuffle*';
  const ignoreText = '# The following line was added by Reshuffle' + EOL + ignorePattern;
  let initialContent;
  try {
    initialContent = readFileSync(gitIgnoreFile, { encoding: 'utf8' });
  } catch (e) {
    return `Did not update ${gitIgnoreFile}`;
  }
  const lines: string[] = initialContent.split(EOL);
  const found = lines.find((line) => line && line.replace(/ +$/, '') === ignorePattern);
  if (found) {
    return `Did not need to update ${gitIgnoreFile}`;
  }
  const newContent = initialContent ?  initialContent + EOL + ignoreText : ignoreText;
  writeFileSync(gitIgnoreFile, newContent);
  return `Updated ${gitIgnoreFile}, please commit this file`;
}
